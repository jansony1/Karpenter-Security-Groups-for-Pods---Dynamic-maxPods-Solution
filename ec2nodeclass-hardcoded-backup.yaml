apiVersion: karpenter.k8s.aws/v1
kind: EC2NodeClass
metadata:
  name: m5-dynamic-nodeclass-v2
spec:
  amiFamily: AL2
  amiSelectorTerms:
    - alias: al2@latest
  subnetSelectorTerms:
    - tags:
        karpenter.sh/discovery: "nlb-test-cluster"
  securityGroupSelectorTerms:
    - tags:
        karpenter.sh/discovery: "nlb-test-cluster"
  instanceProfile: "KarpenterNodeInstanceProfile"
  
  userData: |
    #!/bin/bash
    
    # Wait for network to be ready
    sleep 15
    
    # Check if instance type supports trunk ENI (Security Groups for Pods)
    is_trunk_eni_compatible() {
        local instance_type=$1
        
        # Instance types that support trunk ENI (IsTrunkingCompatible: true)
        case $instance_type in
            # M5 series - supports trunk ENI
            "m5.large"|"m5.xlarge"|"m5.2xlarge"|"m5.4xlarge"|"m5.8xlarge"|"m5.12xlarge"|"m5.16xlarge"|"m5.24xlarge")
                echo "true" ;;
            # C5 series - supports trunk ENI  
            "c5.large"|"c5.xlarge"|"c5.2xlarge"|"c5.4xlarge"|"c5.9xlarge"|"c5.12xlarge"|"c5.18xlarge"|"c5.24xlarge")
                echo "true" ;;
            # R5 series - supports trunk ENI
            "r5.large"|"r5.xlarge"|"r5.2xlarge"|"r5.4xlarge"|"r5.8xlarge"|"r5.12xlarge"|"r5.16xlarge"|"r5.24xlarge")
                echo "true" ;;
            # M6i series - supports trunk ENI
            "m6i.large"|"m6i.xlarge"|"m6i.2xlarge"|"m6i.4xlarge"|"m6i.8xlarge"|"m6i.12xlarge"|"m6i.16xlarge"|"m6i.24xlarge")
                echo "true" ;;
            # T series - does NOT support trunk ENI
            "t1.micro"|"t2.nano"|"t2.micro"|"t2.small"|"t2.medium"|"t2.large"|"t2.xlarge"|"t2.2xlarge")
                echo "false" ;;
            "t3.nano"|"t3.micro"|"t3.small"|"t3.medium"|"t3.large"|"t3.xlarge"|"t3.2xlarge")
                echo "false" ;;
            # Default: assume not compatible for safety
            *)
                echo "false" ;;
        esac
    }
    
    # Check if Security Groups for Pods is enabled in the cluster
    check_sg_for_pods_enabled() {
        # This will be checked after cluster join, return unknown for now
        echo "unknown"
    }
    
    # Dynamic maxPods calculation function
    calculate_max_pods() {
        local instance_type=$1
        local default_max_pods
        local reserved_enis=0
        local adjusted_max_pods
        local trunk_eni_compatible
        
        # Get default maxPods value based on instance type
        case $instance_type in
            # T3 series (no trunk ENI support)
            "t3.micro")    default_max_pods=4 ;;
            "t3.small")    default_max_pods=11 ;;
            "t3.medium")   default_max_pods=17 ;;
            "t3.large")    default_max_pods=35 ;;
            "t3.xlarge")   default_max_pods=58 ;;
            "t3.2xlarge")  default_max_pods=58 ;;
            
            # M5 series (trunk ENI compatible)
            "m5.large")    default_max_pods=29 ;;
            "m5.xlarge")   default_max_pods=58 ;;
            "m5.2xlarge")  default_max_pods=58 ;;
            "m5.4xlarge")  default_max_pods=234 ;;
            "m5.8xlarge")  default_max_pods=234 ;;
            "m5.12xlarge") default_max_pods=234 ;;
            "m5.16xlarge") default_max_pods=737 ;;
            "m5.24xlarge") default_max_pods=737 ;;
            
            # C5 series (trunk ENI compatible)
            "c5.large")    default_max_pods=29 ;;
            "c5.xlarge")   default_max_pods=58 ;;
            "c5.2xlarge")  default_max_pods=58 ;;
            "c5.4xlarge")  default_max_pods=234 ;;
            "c5.9xlarge")  default_max_pods=234 ;;
            "c5.12xlarge") default_max_pods=234 ;;
            "c5.18xlarge") default_max_pods=737 ;;
            "c5.24xlarge") default_max_pods=737 ;;
            
            # R5 series (trunk ENI compatible)
            "r5.large")    default_max_pods=29 ;;
            "r5.xlarge")   default_max_pods=58 ;;
            "r5.2xlarge")  default_max_pods=58 ;;
            "r5.4xlarge")  default_max_pods=234 ;;
            "r5.8xlarge")  default_max_pods=234 ;;
            "r5.12xlarge") default_max_pods=234 ;;
            "r5.16xlarge") default_max_pods=737 ;;
            "r5.24xlarge") default_max_pods=737 ;;
            
            # M6i series (trunk ENI compatible)
            "m6i.large")    default_max_pods=29 ;;
            "m6i.xlarge")   default_max_pods=58 ;;
            "m6i.2xlarge")  default_max_pods=58 ;;
            "m6i.4xlarge")  default_max_pods=234 ;;
            "m6i.8xlarge")  default_max_pods=234 ;;
            "m6i.12xlarge") default_max_pods=234 ;;
            "m6i.16xlarge") default_max_pods=737 ;;
            "m6i.24xlarge") default_max_pods=737 ;;
            
            # Default values for unknown types
            *)
                echo "Unknown instance type: $instance_type, using conservative defaults" >> /var/log/karpenter-maxpods.log
                default_max_pods=20
                ;;
        esac
        
        # Check if instance supports trunk ENI
        trunk_eni_compatible=$(is_trunk_eni_compatible $instance_type)
        
        # Calculate reserved ENIs only if instance supports trunk ENI
        if [ "$trunk_eni_compatible" = "true" ]; then
            # Calculate reserved ENIs for trunk ENI compatible instances
            case $instance_type in
                # M5 series reserved ENIs
                "m5.large")    reserved_enis=9 ;;
                "m5.xlarge")   reserved_enis=18 ;;
                "m5.2xlarge")  reserved_enis=18 ;;
                "m5.4xlarge")  reserved_enis=54 ;;
                "m5.8xlarge")  reserved_enis=54 ;;
                "m5.12xlarge") reserved_enis=54 ;;
                "m5.16xlarge") reserved_enis=108 ;;
                "m5.24xlarge") reserved_enis=108 ;;
                
                # C5 series reserved ENIs
                "c5.large")    reserved_enis=9 ;;
                "c5.xlarge")   reserved_enis=18 ;;
                "c5.2xlarge")  reserved_enis=18 ;;
                "c5.4xlarge")  reserved_enis=54 ;;
                "c5.9xlarge")  reserved_enis=54 ;;
                "c5.12xlarge") reserved_enis=54 ;;
                "c5.18xlarge") reserved_enis=108 ;;
                "c5.24xlarge") reserved_enis=108 ;;
                
                # R5 series reserved ENIs
                "r5.large")    reserved_enis=9 ;;
                "r5.xlarge")   reserved_enis=18 ;;
                "r5.2xlarge")  reserved_enis=18 ;;
                "r5.4xlarge")  reserved_enis=54 ;;
                "r5.8xlarge")  reserved_enis=54 ;;
                "r5.12xlarge") reserved_enis=54 ;;
                "r5.16xlarge") reserved_enis=108 ;;
                "r5.24xlarge") reserved_enis=108 ;;
                
                # M6i series reserved ENIs
                "m6i.large")    reserved_enis=9 ;;
                "m6i.xlarge")   reserved_enis=18 ;;
                "m6i.2xlarge")  reserved_enis=18 ;;
                "m6i.4xlarge")  reserved_enis=54 ;;
                "m6i.8xlarge")  reserved_enis=54 ;;
                "m6i.12xlarge") reserved_enis=54 ;;
                "m6i.16xlarge") reserved_enis=108 ;;
                "m6i.24xlarge") reserved_enis=108 ;;
                
                *)
                    reserved_enis=5  # Conservative default for unknown trunk-compatible types
                    ;;
            esac
            
            echo "Instance $instance_type supports trunk ENI, reserving $reserved_enis ENIs" >> /var/log/karpenter-maxpods.log
        else
            reserved_enis=0
            echo "Instance $instance_type does NOT support trunk ENI, no ENI reservation needed" >> /var/log/karpenter-maxpods.log
        fi
        
        # Calculate adjusted maxPods
        adjusted_max_pods=$((default_max_pods - reserved_enis))
        
        # Ensure minimum value of 10
        if [ $adjusted_max_pods -lt 10 ]; then
            adjusted_max_pods=10
        fi
        
        echo $adjusted_max_pods
    }
    
    # Get instance type using IMDSv2
    INSTANCE_TYPE=""
    for i in {1..10}; do
        # Get IMDSv2 token
        TOKEN=$(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" --max-time 5 2>/dev/null)
        if [ ! -z "$TOKEN" ]; then
            # Use token to get instance type
            INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $TOKEN" -s --max-time 5 http://169.254.169.254/latest/meta-data/instance-type 2>/dev/null)
            if [ ! -z "$INSTANCE_TYPE" ]; then
                break
            fi
        fi
        echo "Retry $i: Waiting for instance metadata..." >> /var/log/karpenter-maxpods.log
        sleep 10
    done
    
    # Calculate maxPods
    MAX_PODS=$(calculate_max_pods $INSTANCE_TYPE)
    
    # Log detailed calculation
    TRUNK_ENI_COMPATIBLE=$(is_trunk_eni_compatible $INSTANCE_TYPE)
    echo "$(date): Instance Type: $INSTANCE_TYPE" >> /var/log/karpenter-maxpods.log
    echo "$(date): Trunk ENI Compatible: $TRUNK_ENI_COMPATIBLE" >> /var/log/karpenter-maxpods.log
    echo "$(date): Calculated Max Pods: $MAX_PODS" >> /var/log/karpenter-maxpods.log
    
    # Wait for kubelet config directory to be ready
    while [ ! -d "/etc/kubernetes/kubelet" ]; do
        echo "$(date): Waiting for kubelet config directory..." >> /var/log/karpenter-maxpods.log
        sleep 5
    done
    
    echo "$(date): Using calculated Max Pods value: $MAX_PODS" >> /var/log/karpenter-maxpods.log
    echo "$(date): Security Groups for Pods detection will be performed after cluster join" >> /var/log/karpenter-maxpods.log
    
    # Bootstrap EKS with calculated maxPods
    /etc/eks/bootstrap.sh nlb-test-cluster --kubelet-extra-args "--max-pods=$MAX_PODS"
    
    # Create post-join check script for SG for Pods validation
    cat > /opt/check-sg-for-pods.sh << 'EOF'
    #!/bin/bash
    # Wait for node to fully join cluster
    sleep 60
    
    # Check Security Groups for Pods configuration
    SG_FOR_PODS_ENABLED="false"
    
    # Try multiple methods to check ENABLE_POD_ENI
    if command -v kubectl >/dev/null 2>&1; then
        # Method 1: Check aws-node DaemonSet
        SG_FOR_PODS_ENABLED=$(kubectl get daemonset aws-node -n kube-system -o jsonpath='{.spec.template.spec.containers[0].env[?(@.name=="ENABLE_POD_ENI")].value}' 2>/dev/null || echo "false")
        
        # Method 2: If method 1 fails, check ConfigMap
        if [ "$SG_FOR_PODS_ENABLED" = "false" ] || [ -z "$SG_FOR_PODS_ENABLED" ]; then
            SG_FOR_PODS_ENABLED=$(kubectl get configmap amazon-vpc-cni -n kube-system -o jsonpath='{.data.enable-pod-eni}' 2>/dev/null || echo "false")
        fi
    fi
    
    # Get instance type and trunk ENI compatibility
    INSTANCE_TYPE=$(curl -H "X-aws-ec2-metadata-token: $(curl -X PUT "http://169.254.169.254/latest/api/token" -H "X-aws-ec2-metadata-token-ttl-seconds: 21600" --max-time 5 2>/dev/null)" -s --max-time 5 http://169.254.169.254/latest/meta-data/instance-type 2>/dev/null)
    
    # Check trunk ENI compatibility
    case $INSTANCE_TYPE in
        m5.*|c5.*|r5.*|m6i.*) TRUNK_ENI_COMPATIBLE="true" ;;
        t1.*|t2.*|t3.*) TRUNK_ENI_COMPATIBLE="false" ;;
        *) TRUNK_ENI_COMPATIBLE="unknown" ;;
    esac
    
    # Log comprehensive status
    echo "$(date): === Security Groups for Pods Validation ===" >> /var/log/karpenter-maxpods.log
    echo "$(date): Instance Type: $INSTANCE_TYPE" >> /var/log/karpenter-maxpods.log
    echo "$(date): Trunk ENI Compatible: $TRUNK_ENI_COMPATIBLE" >> /var/log/karpenter-maxpods.log
    echo "$(date): Security Groups for Pods Enabled: $SG_FOR_PODS_ENABLED" >> /var/log/karpenter-maxpods.log
    
    if [ "$SG_FOR_PODS_ENABLED" = "true" ]; then
        if [ "$TRUNK_ENI_COMPATIBLE" = "true" ]; then
            echo "$(date): [OK] Security Groups for Pods is ENABLED and instance supports trunk ENI" >> /var/log/karpenter-maxpods.log
            echo "$(date): ENI reservation is appropriate for this configuration" >> /var/log/karpenter-maxpods.log
        else
            echo "$(date): [WARNING]  Security Groups for Pods is ENABLED but instance does NOT support trunk ENI" >> /var/log/karpenter-maxpods.log
            echo "$(date): Pods on this node will not benefit from Security Groups for Pods" >> /var/log/karpenter-maxpods.log
        fi
    else
        if [ "$TRUNK_ENI_COMPATIBLE" = "true" ]; then
            echo "$(date): [INFO]  Security Groups for Pods is DISABLED but instance supports trunk ENI" >> /var/log/karpenter-maxpods.log
            echo "$(date): Could enable Security Groups for Pods if needed" >> /var/log/karpenter-maxpods.log
        else
            echo "$(date): [OK] Security Groups for Pods is DISABLED and instance does not support trunk ENI" >> /var/log/karpenter-maxpods.log
            echo "$(date): Standard maxPods calculation is appropriate" >> /var/log/karpenter-maxpods.log
        fi
    fi
    
    # Log final configuration
    CURRENT_MAX_PODS=$(ps aux | grep kubelet | grep -o '\--max-pods=[0-9]*' | cut -d= -f2)
    echo "$(date): Final Max Pods configuration: $CURRENT_MAX_PODS" >> /var/log/karpenter-maxpods.log
    echo "$(date): === Validation Complete ===" >> /var/log/karpenter-maxpods.log
    EOF
    
    chmod +x /opt/check-sg-for-pods.sh
    
    # Run check script in background
    nohup /opt/check-sg-for-pods.sh > /var/log/sg-pods-check.log 2>&1 &

  blockDeviceMappings:
    - deviceName: /dev/xvda
      ebs:
        volumeSize: 100Gi
        volumeType: gp3
        encrypted: true
        deleteOnTermination: true
  
  tags:
    ManagedBy: "karpenter"
    Version: "v2"
